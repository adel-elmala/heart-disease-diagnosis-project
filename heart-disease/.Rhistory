str(output)
Fit
confusionMatrix(data = output,testing$target)
source('~/sbe304-fall19-project-sbe304-2021-team09/heart-disease/preprocessing.R', echo=TRUE)
source('~/sbe304-fall19-project-sbe304-2021-team09/heart-disease/preprocessing.R', echo=TRUE)
#specifing the path of the csv file
path <- file.path("~","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
#path <- file.path("~","Desktop","SBE304-ML","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
path
### NOTE : if this path generated an error,simply edit it to match yours on your machine,
###       could look like this "/home/adel/sbe304-fall19-project-sbe304-2021-team09/echocardiogram-uci/echocardiogram.csv"
#retrieving dataset from csv file
data <- read.csv(path,stringsAsFactors = FALSE)
#sampling the data
head(data)
str(data)
#data names vector
headerNames <- c("age","sex","cp","trestbps","chol","fbs","restecg"
,"thalach","exang","oldpeak","slope","ca","thal","Class")
#renaming the dataframe columns
colnames(data) <- headerNames
#sampling filtered dataset and getting info
head(data)
str(data)
data
summary(data)
#counting missing values
sum(is.na(data)) # No missing found
#summary of data
summary(data)
#counting missing values
sapply(data , function(x) sum(is.na(data))) # No missing found
#adding new col to data and removing class
names(data)
target <- data$Class
makeBinary <- function(x){
if(x == 0){
return ("Negative")
}
else{
return ("Postive")
}
}
##"factor"ing won't work with binary nums.
##So , we used "Postive" , "Negative"
target<-sapply(target,makeBinary)
target
data<-cbind(data,target)
str(data)
keep <- c(names(data)[1:13],names(data[15]))
keep
data <- data[keep]
head(data)
#check data types
str(data)
#Categorical feature encoding
library(dplyr)
data <- data %>%
mutate(
ca = as.numeric(ca),
thal = as.numeric(thal),
target = as.factor(target)
# lables = make.names(levels(target)))
)
### When using Traget = as.factor.....so we can work with nb model (requires class as factor)
### This Error came : Error: At least one of the class levels is not a valid R variable name;
### This will cause errors when class probabilities are generated because the variables
### names will be converted to  X0, X1 . Please use factor levels that can be used as
### valid R variable names  (see ?make.names for help).
### So , We changed it to the current code by using make.names as suggested
### Somthing is wrong with names ("0","1") ...Didn't understand it well
### REQUIRES MORE RESEARCH TIME (404 Time not found)
#removing NAs generated by mutate
data <- na.omit(data)
#check data types
str(data)
data
sapply(data , function(x) sum(is.na(data))) # No missing found
#Splitting data to train and test
library(caret)
#set.seed(98)
#Train <- createDataPartition(
#    y = data$target ,#output of model
#    p = .80 , #percentage of data in training set
#    list = FALSE
#)
#str(Train)
#training <- data[Train,] ##Why comma here???
#testing <- data[-Train,]
##number of Rows in each partition
#nrow(training)
#nrow(testing)
cntrl <- trainControl(
method ="repeatedcv",
repeats = 5,
classProbs = TRUE ,
summaryFunction = twoClassSummary
)
##NB model training
set.seed(420)
##Fit<- train(
#    target ~.,
#    data = training,
#    method = "naive_bayes",
#preProc = c("center","scale"),
# tuneLength =15,
#  trControl = cntrl,
#   metric = "ROC"
#)
Fit<- train(
target ~.,
data = data,
method = "naive_bayes",
preProc = c("center","scale"),
tuneGrid = expand.grid(.laplace = 0, .usekernel = TRUE, .adjust = 0),
trControl = cntrl,
metric = "ROC"
)
Fit
output <- predict(Fit,  newdata = testing)
str(output)
confusionMatrix(data = output,testing$target)
##Desicision Tree
Fit<- train(
target ~.,
data = training,
method = "rpart",
preProc = c("center","scale"),
tuneLength =15,
trControl = cntrl,
metric = "ROC"
)
output <- predict(Fit,  newdata = testing)
Fit
str(output)
confusionMatrix(data = output,testing$target)
##Logistic Reg. Training
#Fit<- train(
#   target ~.,
#  data = training,
#  method = "regLogistic",
#preProc = c("center","scale"),
#tuneLength =15,
#trControl = cntrl,
#metric = "ROC"
#)
#output <- predict(Fit,  newdata = testing)
#str(output)
confusionMatrix(data = output,testing$target)
##Desicision Tree
Fit<- train(
target ~.,
data = training,
method = "rpart",
preProc = c("center","scale"),
tuneLength =15,
trControl = cntrl,
metric = "ROC"
)
##Fit<- train(
#    target ~.,
#    data = training,
#    method = "naive_bayes",
#preProc = c("center","scale"),
# tuneLength =15,
#  trControl = cntrl,
#   metric = "ROC"
#)
Fit<- train(
target ~.,
data = data,
method = "naive_bayes",
preProc = c("center","scale"),
tuneGrid = expand.grid(.laplace = 0, .usekernel = TRUE, .adjust = 0),
trControl = cntrl,
metric = "ROC"
)
Fit
output <- predict(Fit,  newdata = data)
str(output)
confusionMatrix(data = output,data$target)
##Desicision Tree
Fit<- train(
target ~.,
data = data,
method = "rpart",
preProc = c("center","scale"),
tuneLength =15,
trControl = cntrl,
metric = "ROC"
)
output <- predict(Fit,  newdata = data)
Fit
str(output)
confusionMatrix(data = output,data$target)
q()
path <- file.path("~","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
#path <- file.path("~","Desktop","SBE304-ML","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
path
#retrieving dataset from csv file
data <- read.csv(path,stringsAsFactors = FALSE)
#sampling the data
head(data)
str(data)
#data names vector
headerNames <- c("age","sex","cp","trestbps","chol","fbs","restecg"
,"thalach","exang","oldpeak","slope","ca","thal","Class")
#renaming the dataframe columns
colnames(data) <- headerNames
#sampling filtered dataset and getting info
head(data)
str(data)
data
summary(data)
#counting missing values
sum(is.na(data)) # No missing found
#summary of data
summary(data)
#counting missing values
sapply(data , function(x) sum(is.na(data))) # No missing found
#adding new col to data and removing class
names(data)
target <- data$Class
makeBinary <- function(x){
if(x == 0){
return ("Negative")
}
else{
return ("Postive")
}
}
##"factor"ing won't work with binary nums.
##So , we used "Postive" , "Negative"
target<-sapply(target,makeBinary)
target
data<-cbind(data,target)
str(data)
keep <- c(names(data)[1:13],names(data[15]))
keep
data <- data[keep]
head(data)
#check data types
str(data)
#Categorical feature encoding
library(dplyr)
data <- data %>%
mutate(
ca = as.numeric(ca),
thal = as.numeric(thal),
target = as.factor(target)
)
#removing NAs generated by mutate
data <- na.omit(data)
#check data types
str(data)
data
sapply(data , function(x) sum(is.na(data)))
library(caret)
cntrl <- trainControl(
method ="repeatedcv",
repeats = 5,
classProbs = TRUE ,
summaryFunction = twoClassSummary
)
##Naive Bayes
set.seed(420)
NB_Fit<- train(
target ~.,
data = data,
method = "naive_bayes",
preProc = c("center","scale"),
tuneGrid = expand.grid(.laplace = 0, .usekernel = TRUE, .adjust = 1),
trControl = cntrl,
metric = "ROC"
)
NB_Fit
##Desicision Tree
DT_Fit<- train(
target ~.,
data = data,
method = "rpart",
preProc = c("center","scale"),
tuneLength =15,
trControl = cntrl,
metric = "ROC"
)
DT_Fit
##Logistic Reg. Training
Log_Fit<- train(
target ~.,
data = data,
method = "glm",
preProc = c("center","scale"),
tuneLength =15,
trControl = cntrl,
metric = "ROC"
)
Log_Fit
path <- file.path("~","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
#path <- file.path("~","Desktop","SBE304-ML","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
path
#retrieving dataset from csv file
data <- read.csv(path,stringsAsFactors = FALSE)
#sampling the data
head(data)
str(data)
#data names vector
headerNames <- c("age","sex","cp","trestbps","chol","fbs","restecg"
,"thalach","exang","oldpeak","slope","ca","thal","Class")
#renaming the dataframe columns
colnames(data) <- headerNames
#sampling filtered dataset and getting info
head(data)
str(data)
data
summary(data)
#counting missing values
sum(is.na(data)) # No missing found
#summary of data
summary(data)
#counting missing values
sapply(data , function(x) sum(is.na(data))) # No missing found
#adding new col to data and removing class
names(data)
target <- data$Class
makeBinary <- function(x){
if(x == 0){
return ("Negative")
}
else{
return ("Postive")
}
}
##"factor"ing won't work with binary nums.
##So , we used "Postive" , "Negative"
target<-sapply(target,makeBinary)
##"factoring" won't work with binary nums.
##So , we used "Postive" , "Negative"
target<-sapply(target,makeBinary)
target
data<-cbind(data,target)
str(data)
keep <- c(names(data)[1:13],names(data[15]))
keep
data <- data[keep]
head(data)
path <- file.path("~","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
#path <- file.path("~","Desktop","SBE304-ML","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
path
#retrieving dataset from csv file
data <- read.csv(path,stringsAsFactors = FALSE)
#sampling the data
head(data)
str(data)
#data names vector
headerNames <- c("age","sex","cp","trestbps","chol","fbs","restecg"
,"thalach","exang","oldpeak","slope","ca","thal","Class")
#renaming the dataframe columns
colnames(data) <- headerNames
#sampling filtered dataset and getting info
head(data)
str(data)
data
summary(data)
#counting missing values
sum(is.na(data)) # No missing found
#summary of data
summary(data)
#counting missing values
sapply(data , function(x) sum(is.na(data))) # No missing found
#adding new col to data and removing class
names(data)
target <- data$Class
makeBinary <- function(x){
if(x == 0){
return ("Negative")
}
else{
return ("Postive")
}
}
##"factoring" won't work with binary nums.
##So , we used "Postive" , "Negative"
target<-sapply(target,makeBinary)
target
data<-cbind(data,target)
str(data)
keep <- c(names(data)[1:13],names(data[15]))
keep
data <- data[keep]
head(data)
#check data types
str(data)
#Categorical feature encoding
library(dplyr)
data <- data %>%
mutate(
ca = as.numeric(ca),
thal = as.numeric(thal),
target = as.factor(target)
)
#removing NAs generated by mutate
data <- na.omit(data)
#check data types
str(data)
data
sapply(data , function(x) sum(is.na(data)))
library(caret)
path <- file.path("~","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
#path <- file.path("~","Desktop","SBE304-ML","sbe304-fall19-project-sbe304-2021-team09","heart-disease","processed.cleveland.data")
path
#retrieving dataset from csv file
data <- read.csv(path,stringsAsFactors = FALSE)
#sampling the data
head(data)
str(data)
#data names vector
headerNames <- c("age","sex","cp","trestbps","chol","fbs","restecg"
,"thalach","exang","oldpeak","slope","ca","thal","Class")
#renaming the dataframe columns
colnames(data) <- headerNames
#sampling filtered dataset and getting info
head(data)
str(data)
data
summary(data)
#counting missing values
sum(is.na(data)) # No missing found
#summary of data
summary(data)
#counting missing values
sapply(data , function(x) sum(is.na(data))) # No missing found
#adding new col to data and removing class
names(data)
target <- data$Class
makeBinary <- function(x){
if(x == 0){
return ("Negative")
}
else{
return ("Postive")
}
}
##"factoring" won't work with binary nums.
##So , we used "Postive" , "Negative"
target<-sapply(target,makeBinary)
target
data<-cbind(data,target)
str(data)
keep <- c(names(data)[1:13],names(data[15]))
keep
data <- data[keep]
head(data)
#check data types
str(data)
#Categorical feature encoding
library(dplyr)
data <- data %>%
mutate(
ca = as.numeric(ca),
thal = as.numeric(thal),
target = as.factor(target)
)
sapply(data , function(x) sum(is.na(data)))
#removing NAs generated by mutate
data <- na.omit(data)
#check data types
str(data)
data
sapply(data , function(x) sum(is.na(data)))
library(caret)
cntrl <- trainControl(
method ="repeatedcv",
repeats = 5,
classProbs = TRUE ,
summaryFunction = twoClassSummary
)
##Naive Bayes
set.seed(420)
NB_Fit<- train(
target ~.,
data = data,
method = "naive_bayes",
preProc = c("center","scale"),
tuneGrid = expand.grid(.laplace = 0, .usekernel = TRUE, .adjust = 1),
trControl = cntrl,
metric = "ROC"
)
NB_Fit
##Desicision Tree
DT_Fit<- train(
target ~.,
data = data,
method = "rpart",
preProc = c("center","scale"),
tuneLength =15,
trControl = cntrl,
metric = "ROC"
)
DT_Fit
##Logistic Reg. Training
Log_Fit<- train(
target ~.,
data = data,
method = "glm",
preProc = c("center","scale"),
tuneLength =15,
trControl = cntrl,
metric = "ROC"
)
Log_Fit
q()
